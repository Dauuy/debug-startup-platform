# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Actions(models.Model):
    action_id = models.AutoField(primary_key=True)
    action_name = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'actions'


class ActivityLog(models.Model):
    log_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    action = models.ForeignKey(Actions, models.DO_NOTHING, blank=True, null=True)
    details = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'activity_log'


class ChatConversations(models.Model):
    conversation_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'chat_conversations'


class ChatParticipants(models.Model):
    participant_id = models.AutoField(primary_key=True)
    conversation = models.ForeignKey(ChatConversations, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'chat_participants'


class Comments(models.Model):
    comment_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    content = models.TextField()
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    parent_comment = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comments'


class Directions(models.Model):
    direction_id = models.AutoField(primary_key=True)
    direction_name = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'directions'


class EntityTypes(models.Model):
    type_id = models.AutoField(primary_key=True)
    type_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'entity_types'


class FileStorage(models.Model):
    file_id = models.AutoField(primary_key=True)
    entity_type = models.ForeignKey(EntityTypes, models.DO_NOTHING, blank=True, null=True)
    entity_id = models.IntegerField(blank=True, null=True)
    file_url = models.CharField(max_length=255)
    file_type = models.ForeignKey('FileTypes', models.DO_NOTHING, blank=True, null=True)
    uploaded_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'file_storage'


class FileTypes(models.Model):
    type_id = models.AutoField(primary_key=True)
    type_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'file_types'


class InvestmentTransactions(models.Model):
    transaction_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    investor = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    is_micro = models.BooleanField(blank=True, null=True)
    transaction_type = models.ForeignKey('TransactionTypes', models.DO_NOTHING, blank=True, null=True)
    payment_gateway_response = models.JSONField(blank=True, null=True)
    transaction_status = models.CharField(max_length=50, blank=True, null=True)
    payment_method = models.ForeignKey('PaymentMethods', models.DO_NOTHING, blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'investment_transactions'


class LegalPages(models.Model):
    page_id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=255)
    content = models.TextField()
    version = models.CharField(max_length=50, blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'legal_pages'


class MessageStatuses(models.Model):
    status_id = models.AutoField(primary_key=True)
    status_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'message_statuses'


class Messages(models.Model):
    message_id = models.AutoField(primary_key=True)
    conversation = models.ForeignKey(ChatConversations, models.DO_NOTHING, blank=True, null=True)
    sender = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    message_text = models.TextField()
    status = models.ForeignKey(MessageStatuses, models.DO_NOTHING, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'messages'


class ModeratorReviews(models.Model):
    review_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    moderator = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    review_status = models.ForeignKey('ReviewStatuses', models.DO_NOTHING, blank=True, null=True)
    comments = models.TextField(blank=True, null=True)
    reviewed_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'moderator_reviews'


class NewsArticles(models.Model):
    article_id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=255)
    content = models.TextField()
    author = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    published_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'news_articles'


class NotificationTypes(models.Model):
    type_id = models.AutoField(primary_key=True)
    type_name = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'notification_types'


class Notifications(models.Model):
    notification_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    type = models.ForeignKey(NotificationTypes, models.DO_NOTHING, blank=True, null=True)
    message = models.TextField()
    is_read = models.BooleanField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    read_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'notifications'


class PaymentMethods(models.Model):
    method_id = models.AutoField(primary_key=True)
    method_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'payment_methods'


class PlanetCustomizations(models.Model):
    customization_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    top_part = models.CharField(max_length=100, blank=True, null=True)
    middle_part = models.CharField(max_length=100, blank=True, null=True)
    bottom_part = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'planet_customizations'


class ReviewStatuses(models.Model):
    status_id = models.AutoField(primary_key=True)
    status_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'review_statuses'


class Roles(models.Model):
    role_id = models.AutoField(primary_key=True)
    role_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'roles'


class StartupTimeline(models.Model):
    event_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    event_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'startup_timeline'


class StartupVotes(models.Model):
    vote_id = models.AutoField(primary_key=True)
    startup = models.ForeignKey('Startups', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    vote_value = models.ForeignKey('VoteTypes', models.DO_NOTHING, db_column='vote_value', blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'startup_votes'
        unique_together = (('user', 'startup'),)


class Startups(models.Model):
    startup_id = models.AutoField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    status = models.ForeignKey(ReviewStatuses, models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=255)
    only_invest = models.BooleanField(blank=True, null=True)
    only_buy = models.BooleanField(blank=True, null=True)
    direction = models.ForeignKey(Directions, models.DO_NOTHING, blank=True, null=True)
    logo_url = models.CharField(max_length=255, blank=True, null=True)
    price = models.DecimalField(max_digits=65535, decimal_places=65535)
    both_mode = models.BooleanField(blank=True, null=True)
    total_invested = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    info_url = models.CharField(max_length=255, blank=True, null=True)
    percent_amount = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    customization_data = models.JSONField(blank=True, null=True)
    micro_investment_available = models.BooleanField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    total_voters = models.IntegerField(blank=True, null=True)
    sum_votes = models.IntegerField(blank=True, null=True)
    moderator_comment = models.TextField(blank=True, null=True)
    for_sale = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'startups'


class Subscriptions(models.Model):
    subscription_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    plan_name = models.CharField(max_length=100)
    start_date = models.DateTimeField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=50, blank=True, null=True)
    payment_method = models.ForeignKey(PaymentMethods, models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=65535, decimal_places=65535)
    renewal_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'subscriptions'


class TransactionTypes(models.Model):
    type_id = models.AutoField(primary_key=True)
    type_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'transaction_types'


class UserInterests(models.Model):
    interest_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    startup = models.ForeignKey(Startups, models.DO_NOTHING, blank=True, null=True)
    interest_type = models.CharField(max_length=50, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_interests'
        unique_together = (('user', 'startup', 'interest_type'),)


class UserSettings(models.Model):
    setting_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    setting_key = models.CharField(max_length=100)
    setting_value = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'user_settings'


class UserStatuses(models.Model):
    status_id = models.AutoField(primary_key=True)
    status_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'user_statuses'


class Users(models.Model):
    user_id = models.AutoField(primary_key=True)
    email = models.CharField(unique=True, max_length=255)
    password_hash = models.CharField(max_length=255)
    password_salt = models.CharField(max_length=255)
    first_name = models.CharField(max_length=100, blank=True, null=True)
    last_name = models.CharField(max_length=100, blank=True, null=True)
    phone = models.CharField(max_length=20, blank=True, null=True)
    role = models.ForeignKey(Roles, models.DO_NOTHING, blank=True, null=True)
    profile_picture_url = models.CharField(max_length=255, blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    rating = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    status = models.ForeignKey(UserStatuses, models.DO_NOTHING, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    last_login = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'


class VoteTypes(models.Model):
    type_id = models.AutoField(primary_key=True)
    type_name = models.CharField(unique=True, max_length=50)

    class Meta:
        managed = False
        db_table = 'vote_types'
